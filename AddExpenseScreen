
import React, { useState } from 'react';
import { View, StyleSheet, ScrollView } from 'react-native';
import { 
  TextInput, 
  Button, 
  Appbar, 
  HelperText, 
  Text,
} from 'react-native-paper';
import DateTimePicker from '@react-native-community/datetimepicker';
import { Picker } from '@react-native-picker/picker';
const AddExpenseScreen = ({ navigation, route }) => {
  const { setExpenses } = route.params;
  const [description, setDescription] = useState('');
  const [date, setDate] = useState(new Date());
  const [category, setCategory] = useState('Other');
  const [notes, setNotes] = useState('');
  // Validation states
  const [descriptionError, setDescriptionError] = useState(false);
  const [amountError, setAmountError] = useState(false);
  const handleAddExpense = () => {
// Basic validation
    const trimmedDescription = description.trim();
 const parsedAmount = parseFloat(amount);

    // Check if description is empty
if (!trimmedDescription) {
      setDescriptionError(true);
      return;return;
    } else {
      setAmountError(false);
    }
    } else {
      setDescriptionError(false);
    } // If everything is valid, add expense
    setExpenses(prevExpenses => [
 // Check if amount is valid and > 0
    if (isNaN(parsedAmount) || parsedAmount <= 0) {
      setAmountError(true);
  ...prevExpenses,
      {
        id: Date.now(),
        description: trimmedDescription,
 amount: parsedAmount,
        date,
 category,
        notes
      },
    ]);
    navigation.goBack();
  };  // Handle date change from DateTimePicker  const onChangeDate = (event, selectedDate) => {
    setShowDatePicker(false);
      <ScrollView contentContainerStyle={styles.contentContainer}>

    if (selectedDate) {
        {/* DESCRIPTION */}

  return (
    <View style={styles.container}>
   <Appbar.Header>
        <Appbar.BackAction onPress={() => navigation.goBack()} />
      </Appbar.Header>
        <TextInput
          label="Description"
          value={description}
   {descriptionError && (
          <HelperText type="error" visible={descriptionError}>
            Description cannot be empty.
          </HelperText>
        )}

        {/* AMOUNT */}
        <TextInput
          label="Amount"
          onChangeText={text => setAmount(text)}
          keyboardType="numeric"
          style={styles.input}
          mode="outlined"
  error={amountError}
        />
        {amountError && (


          <HelperText type="error" visible={amountError}>

            Please enter a valid amount greater than 0.
          </HelperText>
        )}
    {/* DATE PICKER */}
        <Button
          mode="outlined"
          onPress={() => setShowDatePicker(true)}
          style={styles.datePickerButton}
        >
 Select Date
        </Button>
        <Text style={styles.selectedDateText}>
          {`Selected Date: ${date.toLocaleDateString()}`}
  >
          Select Date
        </Button>
        <Text style={styles.selectedDateText}>
          {`Selected Date: ${date.toLocaleDateString()}`}
        </Text>
>
          Select Date
        </Button>
        <Text style={styles.selectedDateText}>
          {`Selected Date: ${date.toLocaleDateString()}`}
        </Text>
        {showDatePicker && (
          <DateTimePicker
            value={date}
            mode="date"
